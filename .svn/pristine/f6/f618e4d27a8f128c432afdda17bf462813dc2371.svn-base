package com.empass.sdk.customview;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.widget.AutoCompleteTextView;

import com.empass.sdk.R;


/**
 * Created by ESSHU SAINI on 2/1/2016.
 */
@SuppressWarnings("ALL")
public class ClearableAutoCompleteTextView extends AutoCompleteTextView {
    // was the text just cleared?
  //  boolean justCleared = false;

    // if not set otherwise, the default clear listener clears the text in the
    // text view
    private  final OnClearListener defaultClearListener = new OnClearListener() {

        @Override
        public void onClear() {
            final ClearableAutoCompleteTextView clearable= ClearableAutoCompleteTextView.this;
            clearable.setText("");
        }
    };

    private final OnClearListener onClearListener = defaultClearListener;

    // The image we defined for the clear button
    private Drawable imgClearButton = getResources().getDrawable(
            R.drawable.cancel_icon);

    public interface OnClearListener {
        void onClear();
    }

    /* Required methods, not used in this implementation */
    public ClearableAutoCompleteTextView(final Context context) {
        super(context);
        init();
    }

    /* Required methods, not used in this implementation */
    public ClearableAutoCompleteTextView(final Context context, final AttributeSet attrs, final int defStyle) {
        super(context, attrs, defStyle);
        init();
    }

    /* Required methods, not used in this implementation */
    public ClearableAutoCompleteTextView(final Context context, final AttributeSet attrs) {
        super(context, attrs);
        init();
    }

    void init() {
        // Set the bounds of the button
        this.setCompoundDrawablesWithIntrinsicBounds(null, null,
                imgClearButton, null);

        // if the clear button is pressed, fire up the handler. Otherwise do nothing
        this.setOnTouchListener(new OnTouchListener() {
            @Override
            public boolean onTouch(final View view, final MotionEvent event) {

                final ClearableAutoCompleteTextView clearable = ClearableAutoCompleteTextView.this;

                if (clearable.getCompoundDrawables()[2] == null) {
                    return false;
                }

                if (event.getAction() != MotionEvent.ACTION_UP) {
                    return false;
                }
                if (event.getX() > clearable.getWidth() - clearable.getPaddingRight() - imgClearButton.getIntrinsicWidth()) {
                    onClearListener.onClear();
                }
                return false;
            }
        });
        this.setOnFocusChangeListener(new OnFocusChangeListener() {
            @Override
            public void onFocusChange(final View view, final boolean hasFocus) {
                final ClearableAutoCompleteTextView clearable= ClearableAutoCompleteTextView.this;
                if (hasFocus && clearable.getText().length() > 0) {
                    showClearButton();
                } else {
                    hideClearButton();
                }
            }
        });
        this.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(final CharSequence charSequence,final  int start,final  int count, final int after) {

            }

            @Override
            public void onTextChanged(final CharSequence charSequence, final int start, final int before,final  int count) {

            }

            @Override
            public void afterTextChanged(final Editable editable) {
                if(editable.length()>0){
                    showClearButton();
                }else {
                    hideClearButton();
                }
            }
        });
    }


    public void hideClearButton() {
        this.setCompoundDrawables(null, null, null, null);
    }

    public void showClearButton() {
        this.setCompoundDrawablesWithIntrinsicBounds(null, null, imgClearButton, null);
    }

}