package com.empass.sdk.activity;

import android.annotation.SuppressLint;
import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v7.widget.CardView;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.empass.sdk.R;
import com.empass.sdk.adapter.AchievementAdapter;
import com.empass.sdk.controller.SDKDatabaseController;
import com.empass.sdk.customview.MobiTextView;
import com.empass.sdk.db.SDKDBHelper;
import com.empass.sdk.http.SDKHttpRequestHandler;
import com.empass.sdk.http.SDKHttpRequestVO;
import com.empass.sdk.main.EmpassActivity;
import com.empass.sdk.utils.LogUtils;
import com.empass.sdk.vo.AchievementDataVO;
import com.empass.sdk.vo.AchievementVO;
import com.empass.sdk.vo.User;

;

/**
 * for purchase
 */
@SuppressWarnings("ALL")
public class AchievementActivity extends EmpassActivity {
    /**
     * declare variable
     */
    public transient MobiTextView tvHeader;
    /**
     * declear variable
     */
    public transient ListView listView;
    /**
     * cons
     */
    public transient Intent intent;
    /**
     * declear variable
     */
    public transient User user;
    /**
     * declare variable
     */
    public transient CardView cardAchievement;
    /**
     * declare variable
     */
    public transient int newHeight;
    /**
     * Declaer varable
     */
    public transient TextView tvUserName;
    /**
     * Declaer varable
     */
    public transient TextView tvUserSkill;
    /**
     * declare variable
     */
    public transient TextView tvUserLetters;
    /**
     * declare variable
     */
    public transient TextView tvNoAchivement;

    /**
     * declear varibale
     */
    public AchievementActivity() {
        super();
    }

    /**
     * @param savedInstanceState
     */
    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.m_activity_achievement);
        try {
            context = AchievementActivity.this;
            dbHelper = SDKDBHelper.getInstance(context);
            ImageView ivBack = (ImageView) findViewById(R.id.imageViewback);
            ivBack.setColorFilter(getResources().getColor(R.color.header_textcolor));
            tvHeader = (MobiTextView) findViewById(R.id.mobiTextView_topHeader);
            listView = (ListView) findViewById(R.id.list_achievement);
            cardAchievement = (CardView) findViewById(R.id.card_achievement);
            tvUserName = (TextView) findViewById(R.id.tv_username);
            tvUserSkill = (TextView) findViewById(R.id.tv_userskill);
            tvUserLetters = (TextView) findViewById(R.id.tvUserLetters);
            final DisplayMetrics display = new DisplayMetrics();
            this.getWindowManager().getDefaultDisplay().getMetrics(display);
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
                newHeight = display.heightPixels - sdkCommonUtils.dpToPx(this, 180);
            } else {
                newHeight = display.heightPixels - sdkCommonUtils.dpToPx(this, 190);
            }
            final RelativeLayout.LayoutParams rlList = new RelativeLayout.LayoutParams(display.widthPixels, ViewGroup.LayoutParams.WRAP_CONTENT);
            rlList.addRule(RelativeLayout.BELOW, R.id.viewhide);
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
                rlList.setMargins(2, -6, 2, 2);
            } else {
                rlList.setMargins(12, 6, 12, 12);
            }
            tvNoAchivement = (TextView) findViewById(R.id.tv_noachievement);
            cardAchievement.setLayoutParams(rlList);
            cardAchievement.setVisibility(View.GONE);
            tvHeader.setText("Achievement");
            dbController = new SDKDatabaseController(context);
            user = dbHelper.getLogedUser();
            tvUserName.setText(user.getName());
            final String initials = sdkCommonUtils.getShortName(user.getName());
            tvUserLetters.setText(initials);
            intent = getIntent();
            tvUserSkill.setText(intent.getStringExtra(sdkConstant.PREF_SKILL));
            ivBack.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    onClickImageBack(view);
                }
            });
            callAchivementHistoryApi();
        } catch (Exception e) {
            LogUtils.error(sdkConstant.TAG, "Exception", e);
        }
    }

    /**
     * callCoinHistoryApi
     */
    private void callAchivementHistoryApi() {
        if (isInternetAvailable()) {
            try {
                final SDKHttpRequestVO request = new SDKHttpRequestVO(getUrl(), urls.TASK_ACHIVEMENT_HISTORY, dbHelper.getRefData(sdkConstant.TOKEN));
                request.params.put(urls.PLAYER_ID, user.getId());
                request.params.put(sdkConstant.SKILL_ID, intent.getExtras().getString(sdkConstant.GOAL_INTENT));
                request.params.put(urls.AUTH_TYPE, dbHelper.getRefData(urls.AUTH_TYPE));
                request.requestMethod = urls.REQUEST_POST;
                final Handler.Callback callback = new Handler.Callback() {
                    /**
                     * handle callback of request
                     */
                    @Override
                    public boolean handleMessage(final Message msg) {
                        final String response = (String) msg.obj;
                        /**
                         * response is null
                         */
                        if (null == response || sdkConstant.TRY_AGAIN.equalsIgnoreCase(response)) {
                            getStartSlowInternet(sdkConstant.TRY_AGAIN);
                        } else {
                            AchievementVO achievementVO = dbController.handelAchievement(response, request);
                            if (urls.RESPONSE_COSE_201.equalsIgnoreCase(achievementVO.getStatus())) {
                                showData(achievementVO.getData());
                            } else {
                                slowInternet("No History Available");
                                tvNoAchivement.setVisibility(View.VISIBLE);
                                cardAchievement.setVisibility(View.GONE);
                            }
                        }
                        return true;
                    }
                };
                new SDKHttpRequestHandler(this, new Handler(callback), 1).execute(request);
            } catch (NullPointerException e) {
                LogUtils.error(sdkConstant.TAG, "Exception", e);
            } catch (Exception e) {
                LogUtils.error(sdkConstant.TAG, "Exception", e);
            }
        }
    }

    /**
     * showCoinData
     *
     * @param data
     */
    @SuppressLint("SetTextI18n")
    private void showData(final AchievementDataVO[] data) {
        try {
            cardAchievement.setVisibility(View.VISIBLE);
            tvNoAchivement.setVisibility(View.GONE);
            final AchievementAdapter historyAdapter = new AchievementAdapter(this, R.layout.m_activity_achievement, data);
            historyAdapter.notifyDataSetChanged();
            listView.setAdapter(historyAdapter);
        } catch (Exception e) {
            LogUtils.error(sdkConstant.TAG, "Exception", e);
        }
    }

    public void onClickImageBack(View view) {
        onBackPressed();
    }

    /**
     *
     */
    @Override
    public void onBackPressed() {
        try {
            final Intent intent1 = new Intent(this, GoalDetailsActivity.class);
            intent1.putExtra(sdkConstant.GOAL_INTENT, intent.getExtras().getString(sdkConstant.GOAL_INTENT));
            startActivity(intent1);
            finish();
        } catch (Exception e) {
            LogUtils.error(sdkConstant.TAG, "Exception", e);
        }
    }


    /**
     * getStartSlowInternet
     *
     * @param message
     */
    private void getStartSlowInternet(final String message) {
        try {
            final ProgressDialog mProgressDialog = ProgressDialog.show(context, "", "", true);
            mProgressDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
            mProgressDialog.setContentView(R.layout.m_dialog_message_restart);
            mProgressDialog.setCancelable(true);
            final TextView tvLoading = (TextView) mProgressDialog.findViewById(R.id.tv_loading);
            tvLoading.setText(message);
            final Button tvYes = (Button) mProgressDialog.findViewById(R.id.tv_yes);
            tvYes.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(final View v) {
                    mProgressDialog.dismiss();
                    callAchivementHistoryApi();
                }
            });
            final Button tvNo = (Button) mProgressDialog.findViewById(R.id.tv_no);
            tvNo.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(final View v) {
                    mProgressDialog.dismiss();
                }
            });
            mProgressDialog.show();
        } catch (Exception e) {
            LogUtils.error(sdkConstant.TAG, "Exception", e);
        }
    }
}
